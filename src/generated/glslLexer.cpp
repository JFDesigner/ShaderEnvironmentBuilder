#line 2 "src/generated/glslLexer.cpp"

#line 4 "src/generated/glslLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 54
#define YY_END_OF_BUFFER 55
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[532] =
    {   0,
       38,   38,    1,    1,   55,   54,   37,   38,   44,   50,
       38,   49,   38,   52,   38,   47,   47,   47,   38,   38,
       51,   51,   51,   51,   38,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   38,   54,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   38,   27,   39,    0,
       47,   42,    0,   48,   47,   47,   51,   47,   47,   47,

       51,   51,   43,   43,   51,   51,   51,   41,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   14,   27,   51,
       51,   51,   20,   22,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   40,   53,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

       47,   47,   47,   47,    0,   36,   47,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   15,   51,   35,   51,   51,   51,   51,
       51,   23,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   51,   51,
       51,   51,   45,   51,   51,   18,   51,   51,   51,   51,

       51,   21,    9,   51,   51,   51,   51,   51,   34,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   33,   51,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   51,   51,   51,   46,   51,   12,   51,    4,
       51,   51,   51,   24,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   16,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,   51,   31,   31,   51,   51,   51,
       51,   51,   51,   51,    7,   34,   51,   51,   25,   51,
       10,   30,   17,   51,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   31,   51,   51,   51,
       51,   19,   28,   51,   51,   51,   51,   51,    5,    6,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   51,   51,    8,   13,   51,   51,
       51,   51,   51,   51,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   51,    3,   26,   51,   51,   51,

       29,   51,    1,    1,    1,    1,    1,    1,    1,    1,
       51,   51,   51,   51,    1,    1,    1,    1,   51,   51,
       51,    1,    1,    1,   32,   51,    1,    1,   11,    1,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    4,    7,    1,    8,
        9,    4,    4,    6,   10,   11,   12,   13,   14,   15,
       16,   17,   13,   13,   13,   13,   13,    1,    6,   18,
       19,   20,    1,    6,   21,   22,   23,   24,   25,   26,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   27,   28,   29,   25,   25,   25,   25,   25,   25,
        9,    1,    9,   30,    6,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   25,   40,   41,   42,   43,
       44,   45,   25,   46,   47,   48,   49,   50,   51,   52,
       53,   25,    9,   54,    9,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   55,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   56,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    3,    1,    1,
        3,    1,    3,    3,    3,    3,    3,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[536] =
    {   0,
        0,    0,   56,    0,  408, 2118, 2118,  355,  313, 2118,
      106, 2118,  104,  332,  103,  118,  160,  274,  109,  117,
      130,  131,  132,  136,  126,  138,  144,  154,  158,  142,
      184,  196,  197,  203,  205,  209,  210,  153,  211,  218,
      243,  227,  219,   97,  236,    0,    0,    0,  266,  239,
        0,  141,    0,  260,  246,  160,  293,  232,  228,  139,
      204,  339,  378,  417,  456,  151,  495,  534,  237,  322,
      319,  340,  332,  360,  366,  391,  193,  394,  217,  374,
      432,  442,  411,  469,  191,  177, 2118, 2118, 2118,  507,
      574, 2118,  228, 2118,  524,  188,  281,  415,  351,  362,

      439,  441,  187, 2118,  443,  485,  483, 2118,  487,  517,
      390,  492,  522,  551,  555,  493,  545,  391,  544,  546,
      568,  556,  560,  589,  593,  566,  595,  597,  603,  605,
      609,  610,  614,  618,  620,  619,  624,  630,  636,  638,
      642, 2118, 2118,    0,    0,    0,  657,  671,    0,  275,
        0,  677,    0,  371,  654,  665,  610,  675,  678,  181,
        0,  687,  686,  694,    0,  701,  702,  715,  718,  710,
      723,  728,  739,  740,  747,  748,  755,  764,  763,  771,
      772,  780,  779,  787,  794,  797,  807,  802,  812,  815,
      820,  828,  825,  837,  836,  844,  845,  853,    0,    0,

        0,  338,  142, 2118,  175, 2118,  891,  637,  667,  768,
      890,  747,  731,  795,  885,  901,  852,  902,  903,  909,
      910,  911,  915,  657,  917,  922,  927,  933,  940,  945,
      944,  946,  956,  957,  962,  961,  963,  969,  970,  974,
      975,  979,  980,  989, 1020,  493,   81,    0,  380,    0,
     1006,  958,  994,  965,  999, 1004, 1007, 1018, 1021, 1028,
     1029, 1036, 1045, 1048, 1053, 1056, 1065, 1064, 1072, 1073,
     1081, 1082, 1089, 1121, 1099, 1096, 1108, 1107, 1116, 1124,
     1129, 1136, 1137, 1152, 1147, 1188, 1165, 1166, 1181, 1136,
     1206, 1210, 1005, 1211, 1212, 1016, 1217, 1082, 1218, 1222,

     1228, 1229, 1235, 1236, 1240, 1245, 1247, 1253, 1254, 1258,
     1259, 1264, 1266, 1265, 1270, 1272, 1271, 1278, 1279, 1285,
     1251, 1275, 1283, 1288, 1278, 1291, 1296, 1299, 1304, 1307,
     1317, 1316, 1327, 1324, 1332, 1335, 1340, 1343, 1350, 1353,
     1360, 1361, 1369, 1370, 1377, 1378, 1392, 1397, 1385, 1400,
     1405, 1410, 1361, 1426, 1301, 1303, 1450, 1390, 1451, 1455,
     1456, 1457, 1461, 1462, 1467, 1468, 1469, 1473, 1475, 1483,
     1485, 1489, 1493, 1494, 1500, 1502, 1504, 1508, 1483, 1491,
     1490, 1499, 1500, 1507, 1508, 1515, 1520, 1527, 1528, 1535,
     1536, 1543, 1544, 1580, 1554, 1559, 1564, 1567, 1577, 1572,

     1587, 1588, 1596, 1597, 1637, 1641, 1510, 1642, 1643, 1647,
     1512, 1649, 1648, 1653, 1654, 1655, 1659, 1660, 1664, 1665,
     1666, 1670, 1676, 1678, 1684, 1656, 1657, 1664, 1669, 1678,
     1681, 1688, 1689, 1698, 1705, 1697, 1706, 1713, 1721, 1718,
     1726, 1729, 1734, 1737, 1744, 1745, 1686, 1758, 1766, 1789,
     1790, 1791, 1795, 1796, 1797, 1801, 1802, 1818, 1807, 1808,
     1778, 1804, 1801, 1818, 1809, 1817, 1825, 1830, 1833, 1843,
     1838, 1876, 1850, 1851, 1809, 1894, 1819, 1827, 1895, 1896,
     1905, 1906, 1907, 1849, 1877, 1889, 1884, 1896, 1904, 1941,
     1925, 1901, 1917, 1916, 1962, 1966, 1968, 1970, 1972, 1978,

     1982, 1984, 1938, 1953, 1954, 1978, 1961, 1969, 1962, 1986,
     2012, 2023, 2027, 2029, 1983, 2007, 2002, 2015, 2034, 2036,
     2052, 2023, 2033, 2026, 2067, 2073, 2036, 2053, 2079, 2045,
     2118,  121, 2108, 2111, 2114
    } ;

static yyconst flex_int16_t yy_def[536] =
    {   0,
      531,    1,  531,    3,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  532,  532,   17,  531,  531,
      532,  532,  532,  532,  531,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  531,  531,  533,  533,  533,  533,  531,
      533,  533,  533,  533,  533,  533,  531,   57,   57,  533,
      533,   57,   57,   57,   57,  533,   57,   57,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,  533,  533,  531,  531,  531,  531,
      531,  531,  534,  531,  531,   17,  532,  532,  532,  532,

      532,  532,  531,  531,  532,  532,  532,  531,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  531,  531,  533,  533,  533,  533,  533,  533,  535,
      533,  533,   57,   68,   68,   68,   68,   68,   68,  533,
      533,   68,   68,   68,  533,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,  533,  533,

       91,  531,  531,  531,  534,  531,  531,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  533,  533,  533,  533,  535,  533,
      533,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,  532,  532,  532,  532,  532,  532,

      532,  532,   68,   68,   68,   68,   68,   68,   68,   68,
      532,  532,  532,  532,   68,   68,   68,   68,  532,  532,
      532,   68,   68,   68,  532,  532,   68,   68,  532,   68,
        0,  531,  531,  531,  531
    } ;

static yyconst flex_int16_t yy_nxt[2175] =
    {   0,
        6,    7,    7,    8,    9,   10,   11,   12,   12,   13,
       14,   15,   16,   17,   18,   16,   16,   19,    8,   20,
       21,   22,   21,   21,   21,   23,   21,   21,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   32,   33,   21,
       34,   35,   36,   37,   38,   39,   40,   24,   41,   42,
       43,   21,   21,   44,    6,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   53,   54,   55,   56,   57,   58,
       59,   57,   57,   60,   49,   61,   62,   63,   62,   62,
       62,   64,   62,   62,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   73,   74,   62,   75,   76,   77,   78,

       79,   80,   81,   65,   82,   83,   84,   62,   62,   85,
       46,   86,   89,   90,   93,   87,   91,   91,   91,   91,
       91,   87,   87,   97,   87,   94,  103,   87,   95,  248,
       96,   96,   96,   96,   96,   87,  104,   94,   94,   94,
      531,  531,  531,   94,   87,   94,  531,  146,  531,   94,
      142,   94,  531,   98,  531,  108,  160,  145,   99,  145,
       94,   94,  106,  531,  531,   94,  100,   94,  531,  145,
       95,  150,   96,   96,   96,   96,   96,  206,  145,  105,
      165,  107,  120,  101,  113,  109,  119,  110,  114,  111,
      204,   94,  116,  112,  531,   98,  117,  115,  130,  161,

       99,  118,  119,   94,   94,  104,  531,  531,  100,  145,
       94,   97,   94,  531,  106,  531,   94,   94,   94,  531,
      531,  531,  145,  161,  121,   94,   94,  122,  531,  531,
      206,  200,  123,  126,   94,  127,  185,  531,  154,  124,
      119,  119,  154,  125,  199,  131,  112,  119,  132,  119,
       94,  159,  128,  531,  119,  158,  141,  138,  129,  133,
      154,  139,  187,  119,  149,  134,  154,  170,  135,  147,
      140,  171,  148,  148,  148,  148,  148,  250,  145,  205,
      172,  136,  154,   88,  145,  137,  154,  119,   94,  125,
      143,  531,  112,  144,  144,  144,  144,  102,  144,  144,

      151,  144,  144,  152,  144,  153,  153,  153,  153,  153,
      144,  144,  144,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  144,  154,  154,  154,  154,  154,  155,  154,
      154,  154,  154,  156,  154,  154,  154,  154,  154,  154,
      154,  157,  154,  154,  154,  154,  144,  144,  144,  144,
       92,  154,  154,  154,  154,  154,  173,   88,   94,  177,
      174,  531,  154,  176,  154,  175,  176,  154,  154,   94,
      163,  154,  531,   87,  154,  154,  176,  154,  203,  154,
      178,  154,  250,  179,  205,  154,  204,  154,  144,  154,
      154,  154,  154,  154,  154,  180,  183,   94,   94,  100,

      531,  531,  181,  154,  176,  154,  182,  531,  188,  154,
      176,  154,  531,  154,  154,  154,  154,  154,  154,  154,
      154,  184,   94,  154,  215,  531,  162,  144,  531,  154,
      154,  154,  154,  154,  154,  176,  154,  154,  176,  154,
      154,  195,  186,  154,  531,  196,   94,  163,   94,  531,
       94,  531,  154,  531,  197,   99,  154,  154,  531,  208,
      154,  208,  189,  100,  531,  154,  144,  209,  154,  154,
      154,  154,  154,  190,  531,  154,  531,  154,  210,  191,
      193,  154,  192,  531,  194,  154,  176,  154,  182,  531,
       94,  154,   94,  531,   94,  531,  154,  531,  531,   94,

       94,  164,  531,  531,  154,  144,  198,  154,  154,  154,
      154,  154,  154,  176,  154,  531,   90,  531,  154,   91,
       91,   91,   91,   91,   94,  211,  139,  531,  219,   94,
      154,  212,  531,  247,  213,  154,  207,  207,  207,  207,
      207,  248,  166,  154,  144,  531,  154,  154,  154,  154,
      154,   94,   94,   94,  531,  531,  531,  531,   94,  202,
      214,  531,   94,   94,  203,  531,  531,   94,  216,  154,
      531,  531,  204,   94,  154,   94,  531,  167,  531,  168,
      531,  531,  154,  169,   95,  531,  201,  201,  201,  201,
      201,  220,  221,  217,  531,  531,   94,  218,  222,  531,

       94,  224,   94,  531,   94,  531,  531,  531,  531,  202,
       94,  223,   94,  531,  203,  531,   94,   94,  229,  531,
      531,   94,  204,  228,  531,   94,   94,   94,  531,  531,
      531,   94,  225,  531,  531,  531,  226,   94,  227,  233,
      531,  231,  230,   94,   94,   94,  531,  531,  531,   94,
      232,  235,  531,  154,  531,  154,  234,  236,  238,  154,
      531,  239,  240,  237,   94,  531,  147,  531,  242,  148,
      148,  148,  148,  148,   94,  241,  243,  531,  531,  531,
      244,  152,  289,  245,  245,  245,  245,  245,  531,  251,
      251,  251,  251,  251,  156,  252,  531,  154,  252,  154,

      531,  290,  157,  154,  253,  531,  246,  531,  154,  531,
      154,  247,  246,  157,  154,  531,  531,  247,  154,  248,
      154,  154,  254,  154,  154,  248,  255,  154,  531,  154,
      154,  154,  154,  531,  531,  154,  154,  154,   94,  154,
      531,  531,  256,  154,  154,  258,  154,  154,  257,  259,
      154,  154,  196,  154,   94,  154,  260,  531,  154,  154,
      154,  154,  531,  154,  154,  261,  154,  154,  154,  531,
      262,  154,  154,  154,  263,   94,  294,  154,  531,  531,
      531,  293,  154,  154,  154,  154,  264,  531,  154,  154,
      154,  154,  154,  154,  266,  531,  154,  154,  154,  531,

      154,  265,   94,  291,  154,  531,  154,  267,  268,  154,
      272,  531,  154,  154,  154,  269,  154,  154,  531,  270,
      154,  271,  154,  154,  154,  154,  531,  531,  154,  154,
      154,  273,  154,  531,  274,  226,  154,  154,  275,  154,
      154,  277,  154,  154,  276,  154,  154,  154,  531,  278,
      154,  154,  154,  279,  531,  154,  154,  154,  280,   94,
      154,  154,  531,  154,  154,  281,  282,  283,  154,  154,
      154,  154,  531,  154,  154,  284,  286,  154,  531,  154,
      154,  285,  154,  287,  531,  154,  154,  154,  154,  154,
      154,  288,   94,  154,  154,  531,  154,   94,  154,  297,

      531,  531,  154,  207,  207,  207,  207,  207,   94,   94,
       94,  531,  531,  531,  531,  295,   94,   94,   94,  531,
      531,  531,   94,  531,   94,  531,  202,  531,  531,   94,
      531,  203,  531,  300,   94,  296,  292,  531,  531,  204,
       94,  301,  531,  531,  302,  304,  531,   94,  298,  299,
      531,   94,   94,   94,  531,  531,  531,  306,  303,  309,
      309,  309,  531,   94,   94,  305,  531,  531,   94,   94,
       94,  531,  531,  531,  307,  531,   94,   94,  310,  531,
      531,   94,   94,  308,  531,  531,   94,   94,  311,  531,
      531,  531,  531,  319,  319,  319,   94,  531,  531,  531,

      323,  154,  531,  321,  314,  312,  313,  154,  154,  317,
      154,  315,   94,  226,  154,  531,  316,  226,  251,  251,
      251,  251,  251,   94,  531,  531,  531,  318,  322,  320,
      152,  531,  245,  245,  245,  245,  245,  154,  325,  154,
      531,  246,  154,  154,  154,  324,  247,  154,  154,  154,
      154,  327,  326,  154,  248,  246,  154,  531,  270,  531,
      247,  154,  328,  154,  154,  531,  154,  154,  248,  531,
      154,  154,  154,  154,  154,  332,  329,  154,  154,  154,
      333,  154,  330,  331,  531,  154,  531,  334,  154,   94,
      154,  154,  531,  154,  154,  336,  154,  154,  154,  154,

      531,  154,  154,  335,  531,  154,  531,  154,  154,  154,
      154,  338,  531,  154,  154,  154,  154,  154,  154,  531,
      337,  154,  154,  339,  154,  154,  154,  154,  531,  360,
      154,  154,  340,  342,  154,  341,  341,  341,  154,  154,
      343,  154,  154,   94,  154,  154,  531,  531,  154,  531,
      154,  154,  154,  154,  531,  344,  154,  154,  531,  154,
      345,  154,  531,  531,  154,  154,  154,  346,  354,  154,
      154,  531,  154,  154,  154,  531,  531,  347,  154,  154,
      154,  154,  154,  348,  270,  154,  154,  349,   94,  531,
      154,  531,  154,  531,  531,  154,  154,  154,  270,  350,

      531,  154,  351,  351,  351,  531,  352,  531,  154,  154,
      154,  154,  531,   94,  154,  154,  531,   94,   94,   94,
      531,  531,  531,  531,   94,   94,  353,  531,  531,   94,
      531,  154,  531,  154,  531,   94,   94,  154,  531,  531,
      355,  531,   94,   94,  356,  531,  531,   94,  531,  357,
      531,  358,   94,  531,   94,  531,  361,  531,  363,  531,
       94,   94,  359,  531,  531,   94,   94,  531,  531,  531,
      362,   94,   94,   94,  531,  531,  531,   94,   94,   94,
      531,  531,  531,  226,  531,   94,   94,  364,  531,  531,
      365,  366,   94,  531,  154,  531,  379,  370,  531,  531,

      154,  367,  374,  369,  375,  368,  372,  380,   94,  371,
       94,  531,  373,  531,  376,  531,  377,  381,  154,  378,
      154,  154,  382,  154,  154,  531,  154,  154,  154,  383,
      531,  154,  154,  154,  154,  384,  154,  154,  531,  154,
      154,  154,  154,  531,  154,  154,  407,  154,  154,  385,
      154,  531,  154,  154,  386,  387,  154,  389,  531,  154,
      154,  154,  154,  531,  388,  154,  154,  154,   94,  154,
      154,  531,  154,  154,  531,  154,  154,  154,  154,  531,
      154,  154,  270,  154,  154,  154,  154,  390,  391,  154,
      531,  405,  154,  154,  392,  154,  154,   94,  154,  154,

      531,  393,  154,  154,  154,  154,  395,  396,  531,  154,
      154,  394,  154,  154,  154,  397,  531,  398,  154,  154,
      154,  154,  154,  154,  400,  399,  154,  154,  402,  401,
      154,  531,  531,   94,  154,  154,  531,  154,  403,  531,
      154,  154,  154,  154,  404,  154,  154,  531,  154,  154,
      154,  531,  531,  154,  154,  154,  531,   94,   94,  154,
      531,  531,   94,   94,   94,  531,  531,  531,   94,   94,
      531,  531,  531,  406,   94,   94,   94,  531,  531,  531,
       94,  408,   94,  531,  531,  531,  531,  416,  416,  416,
       94,  531,   94,  531,  409,  531,   94,  411,  410,  531,

       94,   94,  531,  531,  531,  413,  412,   94,  414,   94,
      531,   94,  531,  426,  531,   94,  415,   94,  531,   94,
      531,  417,  531,  420,  531,  531,  154,  419,  154,  418,
      421,  429,  154,  154,  154,  428,  154,  423,  427,  154,
      154,  422,  154,  154,  154,  154,  425,  424,  154,  154,
      154,  430,  154,  154,  531,  531,  154,  154,  154,  452,
      154,  531,  431,  154,  154,  154,  531,  432,  531,  154,
      154,  154,  154,  433,  434,  531,  154,  154,  154,  154,
      154,  154,  531,  435,  154,  154,  154,  154,  154,  154,
      531,  436,  154,  154,  437,  437,  437,  154,  531,  154,

      438,  441,  154,  154,  154,  439,  440,  154,  154,  154,
      154,  531,  154,  154,  442,  154,  154,  154,  531,  443,
      154,  154,  154,  154,  444,  154,  154,  531,  531,  154,
      154,  154,  154,  445,  531,  531,  154,  154,  446,  154,
      154,  154,  154,  531,   94,  154,  154,  531,   94,   94,
       94,  531,  531,  531,   94,   94,   94,  531,  531,  531,
       94,   94,   94,  531,  531,  531,   94,   94,  448,  531,
      531,   94,   94,   94,  531,  531,  531,   94,  454,  531,
      531,  450,  453,   94,  462,   94,  531,  455,  531,  447,
      449,   94,  531,   94,  531,  451,  531,  531,  457,  154,

      154,  154,  154,  456,  531,  154,  154,  154,  461,  154,
      458,  531,  154,  154,  154,  531,  464,  463,  154,  459,
      460,  154,  467,  154,  154,  531,  154,  154,  468,  465,
      154,  154,  154,  154,  154,  466,  531,  154,  154,  469,
      154,  154,  154,  154,  531,  531,  154,  154,  154,  154,
      154,  154,  531,  531,  154,  154,  154,  470,  154,  471,
      531,  154,  154,  154,  154,   94,  154,  154,  531,  154,
      154,  472,  154,   94,  154,  154,  531,  154,  154,  154,
      154,  474,  154,  154,  531,  473,  154,  154,  154,  154,
      154,  531,  531,  154,  154,  475,   94,   94,   94,  531,

      531,  531,   94,   94,   94,  531,  531,  531,   94,   94,
      531,  531,  531,  476,   94,   94,   94,  531,  531,  531,
      531,  154,  477,  154,  478,   94,   94,  154,  531,  531,
      531,  483,  483,  483,   94,  481,  531,  531,  479,  495,
      484,  485,  480,  488,  154,  482,  154,  154,  486,  154,
      154,  487,  154,  154,  154,  531,   94,  531,  154,  531,
      154,  154,  154,  154,  531,  531,  154,  154,  154,  531,
      154,  531,  489,  154,  154,  154,  154,  491,  490,  154,
      531,  492,  154,  154,  531,  531,  154,  154,  154,  493,
      493,  493,  154,  154,  154,  154,  154,  502,  494,  154,

      154,   94,   94,   94,  531,  531,  531,  503,  531,  498,
      498,  498,   94,   94,   94,  531,  531,  531,  499,  154,
      154,  154,  154,  504,  531,  154,  154,  154,  496,  154,
      447,  531,  154,  154,  154,  531,  531,  500,  154,  154,
      461,  154,  497,  509,  154,  154,  154,  154,  501,  154,
      154,  505,  531,  154,  506,  506,  506,  508,  531,  154,
      154,  154,  154,  507,  510,  154,  154,  531,  154,   94,
      154,  515,  531,   94,  154,   94,  531,   94,  531,   94,
      531,  154,  531,  154,  154,   94,  154,  154,  531,   94,
      154,   94,  531,  407,  531,  511,  154,  154,  154,  154,

      531,  428,  154,  154,  154,  154,  154,  154,  531,  516,
      154,  154,  154,  531,  154,  514,  517,  518,  154,   94,
      512,  154,  531,  154,  531,  513,  522,  154,  154,  154,
       94,  154,  154,  531,   94,  154,   94,  531,  523,  531,
      524,   94,  531,   94,  531,  154,  531,  154,  531,  461,
      154,  154,  154,  531,  520,  519,  154,  531,  154,   94,
      154,  531,  531,  447,  154,  521,  154,  428,  154,  154,
      407,  154,  154,  527,   94,  528,  154,  531,  154,  154,
       94,  154,  154,  531,  525,  154,   94,  530,  154,  531,
      154,  531,  531,  531,  154,  531,  154,  531,  154,  531,

      531,  526,  154,  531,  531,  531,  531,  529,  144,  531,
      144,  205,  205,  205,  249,  249,  249,    5,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531
    } ;

static yyconst flex_int16_t yy_chk[2175] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,   11,   13,   15,   44,   13,   13,   13,   13,
       13,   15,   13,  532,   11,   16,   19,   19,   16,  247,
       16,   16,   16,   16,   16,   20,   20,   21,   22,   23,
       21,   22,   23,   24,   25,   26,   24,   52,   26,   30,
       44,   27,   30,   16,   27,   25,   60,   60,   16,   52,
       38,   28,   23,   38,   28,   29,   16,   17,   29,   66,
       17,   56,   17,   17,   17,   17,   17,  205,   56,   22,
       66,   24,   30,   17,   28,   26,   30,   27,   28,   27,
      203,   31,   29,   27,   31,   17,   29,   28,   38,  160,

       17,   29,   29,   32,   33,  103,   32,   33,   17,   85,
       34,   96,   35,   34,   31,   35,   36,   37,   39,   36,
       37,   39,   61,   61,   31,   40,   43,   31,   40,   43,
       93,   86,   33,   34,   42,   35,   77,   42,   77,   33,
       32,   33,   77,   33,   85,   39,   33,   34,   40,   35,
       41,   59,   36,   41,   37,   58,   43,   42,   37,   40,
       79,   42,   79,   43,   55,   40,   79,   69,   40,   54,
       42,   69,   54,   54,   54,   54,   54,  150,   54,  150,
       69,   41,   69,   50,   49,   41,   69,   41,   97,   41,
       45,   97,   41,   57,   57,   57,   57,   18,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   62,
       14,   62,   62,   62,   62,   62,   70,    9,   99,   71,
       70,   99,   71,   71,   71,   70,   70,   70,   71,  100,
       72,   70,  100,    8,   62,   73,   73,   73,  202,   62,
       72,   73,  249,   72,  249,   72,  202,   62,   63,   72,
       63,   63,   63,   63,   63,   74,   75,  111,  118,   99,

      111,  118,   74,   74,   74,   74,   74,    5,   80,   75,
       75,   75,    0,   63,  154,   75,  154,   80,   63,   80,
      154,   76,   98,   80,  111,   98,   63,   64,    0,   64,
       64,   64,   64,   64,   76,   76,   76,   78,   78,   78,
       76,   83,   78,   78,    0,   83,  101,   64,  102,  101,
      105,  102,   64,  105,   83,   98,   83,   64,    0,  101,
       83,  102,   81,   98,    0,   64,   65,  102,   65,   65,
       65,   65,   65,   81,    0,   81,    0,   81,  105,   81,
       82,   81,   81,    0,   82,   82,   82,   82,   82,    0,
      107,   65,  106,  107,  109,  106,   65,  109,    0,  112,

      116,   65,  112,  116,   65,   67,   84,   67,   67,   67,
       67,   67,   84,   84,   84,    0,   90,    0,   84,   90,
       90,   90,   90,   90,  110,  106,  112,  110,  116,  113,
       67,  107,  113,  246,  109,   67,   95,   95,   95,   95,
       95,  246,   67,   67,   68,    0,   68,   68,   68,   68,
       68,  119,  117,  120,  119,  117,  120,    0,  114,   95,
      110,  114,  115,  122,   95,  115,  122,  123,  113,   68,
      123,    0,   95,  126,   68,  121,  126,   68,  121,   68,
        0,    0,   68,   68,   91,    0,   91,   91,   91,   91,
       91,  117,  120,  114,    0,    0,  124,  115,  121,  124,

      125,  122,  127,  125,  128,  127,    0,  128,    0,   91,
      129,  121,  130,  129,   91,  130,  131,  132,  126,  131,
      132,  133,   91,  125,  133,  134,  136,  135,  134,  136,
      135,  137,  124,    0,  137,    0,  124,  138,  124,  130,
      138,  128,  127,  139,  208,  140,  139,  208,  140,  141,
      129,  132,  141,  157,    0,  157,  131,  133,  135,  157,
        0,  136,  137,  134,  224,    0,  147,  224,  139,  147,
      147,  147,  147,  147,  209,  138,  140,  209,    0,    0,
      141,  148,  208,  148,  148,  148,  148,  148,    0,  152,
      152,  152,  152,  152,  155,  158,    0,  155,  159,  155,

        0,  209,  155,  155,  159,    0,  148,    0,  156,    0,
      156,  148,  152,  156,  156,    0,    0,  152,  158,  148,
      158,  159,  162,  159,  158,  152,  163,  159,    0,  163,
      162,  163,  162,    0,    0,  163,  162,  164,  213,  164,
        0,  213,  164,  164,  166,  167,  166,  167,  166,  168,
      166,  167,  169,  170,  212,  170,  170,  212,  168,  170,
      168,  169,    0,  169,  168,  171,  171,  169,  171,    0,
      172,  172,  171,  172,  173,  210,  213,  172,  210,    0,
        0,  212,  173,  174,  173,  174,  174,    0,  173,  174,
      175,  176,  175,  176,  178,    0,  175,  176,  177,    0,

      177,  177,  214,  210,  177,  214,  179,  178,  179,  178,
      182,    0,  179,  178,  180,  181,  180,  181,    0,  181,
      180,  181,  183,  182,  183,  182,    0,    0,  183,  182,
      184,  183,  184,    0,  184,  214,  184,  185,  185,  185,
      186,  187,  186,  185,  186,  188,  186,  188,    0,  188,
      187,  188,  187,  189,    0,  189,  187,  189,  190,  217,
      190,  189,  217,  191,  190,  191,  192,  193,  193,  191,
      193,  192,    0,  192,  193,  194,  196,  192,    0,  195,
      194,  195,  194,  197,    0,  195,  194,  196,  197,  196,
      197,  198,  215,  196,  197,  215,  198,  211,  198,  217,

      211,    0,  198,  207,  207,  207,  207,  207,  216,  218,
      219,  216,  218,  219,    0,  215,  220,  221,  222,  220,
      221,  222,  223,    0,  225,  223,  207,  225,    0,  226,
        0,  207,  226,  219,  227,  216,  211,  227,    0,  207,
      228,  220,    0,  228,  221,  223,    0,  229,  218,  218,
      229,  231,  230,  232,  231,  230,  232,  227,  222,  230,
      230,  230,    0,  233,  234,  225,  233,  234,  236,  235,
      237,  236,  235,  237,  228,    0,  238,  239,  231,  238,
      239,  240,  241,  229,  240,  241,  242,  243,  233,  242,
      243,    0,    0,  242,  242,  242,  244,    0,    0,  244,

      254,  252,    0,  252,  236,  234,  235,  252,  254,  240,
      254,  237,  293,  243,  254,  293,  238,  239,  251,  251,
      251,  251,  251,  296,    0,    0,  296,  241,  253,  244,
      245,    0,  245,  245,  245,  245,  245,  253,  256,  253,
        0,  251,  255,  253,  255,  255,  251,  256,  255,  256,
      257,  259,  257,  256,  251,  245,  257,    0,  258,    0,
      245,  258,  260,  258,  259,    0,  259,  258,  245,    0,
      259,  260,  261,  260,  261,  263,  261,  260,  261,  262,
      264,  262,  262,  262,    0,  262,    0,  265,  263,  298,
      263,  264,  298,  264,  263,  267,  265,  264,  265,  266,

        0,  266,  265,  266,    0,  266,    0,  268,  267,  268,
      267,  271,    0,  268,  267,  269,  270,  269,  270,    0,
      269,  269,  270,  272,  271,  272,  271,  272,    0,  298,
      271,  272,  273,  275,  273,  274,  274,  274,  273,  276,
      277,  276,  275,  290,  275,  276,  290,    0,  275,    0,
      278,  277,  278,  277,    0,  278,  278,  277,    0,  279,
      279,  279,    0,    0,  274,  279,  274,  280,  290,  280,
      274,    0,  281,  280,  281,    0,    0,  281,  281,  282,
      283,  282,  283,  282,  283,  282,  283,  284,  289,    0,
      285,  289,  285,    0,    0,  284,  285,  284,  287,  285,

        0,  284,  286,  286,  286,    0,  288,    0,  287,  288,
      287,  288,    0,  291,  287,  288,  291,  292,  294,  295,
      292,  294,  295,    0,  297,  299,  289,  297,  299,  300,
        0,  286,  300,  286,    0,  301,  302,  286,  301,  302,
      291,    0,  303,  304,  292,  303,  304,  305,    0,  294,
      305,  295,  306,    0,  307,  306,  299,  307,  301,    0,
      308,  309,  297,  308,  309,  310,  311,    0,  310,  311,
      300,  312,  314,  313,  312,  314,  313,  315,  317,  316,
      315,  317,  316,  304,    0,  318,  319,  305,  318,  319,
      306,  307,  320,    0,  321,  320,  321,  311,    0,    0,

      321,  308,  315,  310,  316,  309,  313,  322,  355,  312,
      356,  355,  314,  356,  317,    0,  318,  323,  322,  320,
      322,  325,  324,  325,  322,    0,  323,  325,  323,  326,
        0,  324,  323,  324,  326,  327,  326,  324,    0,  327,
      326,  327,  328,    0,  328,  327,  355,  329,  328,  329,
      330,    0,  330,  329,  330,  331,  330,  333,    0,  332,
      331,  332,  331,    0,  332,  332,  331,  334,  353,  334,
      333,  353,  333,  334,    0,  335,  333,  335,  336,    0,
      336,  335,  336,  337,  336,  337,  338,  337,  338,  337,
        0,  353,  338,  339,  339,  339,  340,  358,  340,  339,

      358,  340,  340,  341,  342,  341,  342,  343,    0,  341,
      342,  341,  343,  344,  343,  344,    0,  345,  343,  344,
      345,  346,  345,  346,  347,  346,  345,  346,  349,  348,
      349,    0,    0,  354,  349,  347,  354,  347,  350,    0,
      348,  347,  348,  350,  352,  350,  348,    0,  351,  350,
      351,    0,    0,  352,  351,  352,    0,  357,  359,  352,
      357,  359,  360,  361,  362,  360,  361,  362,  363,  364,
        0,  363,  364,  354,  365,  366,  367,  365,  366,  367,
      368,  357,  369,  368,    0,  369,    0,  368,  368,  368,
      370,    0,  371,  370,  359,  371,  372,  362,  361,  372,

      373,  374,    0,  373,  374,  365,  363,  375,  366,  376,
      375,  377,  376,  379,  377,  378,  367,  407,  378,  411,
      407,  369,  411,  372,    0,    0,  379,  371,  379,  370,
      373,  383,  379,  381,  380,  381,  380,  375,  380,  381,
      380,  374,  382,  383,  382,  383,  377,  376,  382,  383,
      384,  385,  384,  385,    0,    0,  384,  385,  386,  411,
      386,    0,  387,  387,  386,  387,    0,  388,    0,  387,
      388,  389,  388,  389,  391,    0,  388,  389,  390,  391,
      390,  391,    0,  392,  390,  391,  392,  393,  392,  393,
        0,  393,  392,  393,  394,  394,  394,  395,    0,  395,

      395,  398,  396,  395,  396,  396,  397,  397,  396,  397,
      398,    0,  398,  397,  399,  400,  398,  400,    0,  400,
      399,  400,  399,  394,  401,  394,  399,    0,    0,  394,
      401,  402,  401,  402,    0,    0,  401,  402,  403,  403,
      404,  403,  404,    0,  405,  403,  404,  405,  406,  408,
      409,  406,  408,  409,  410,  413,  412,  410,  413,  412,
      414,  415,  416,  414,  415,  416,  417,  418,  406,  417,
      418,  419,  420,  421,  419,  420,  421,  422,  413,    0,
      422,  409,  412,  423,  427,  424,  423,  414,  424,  405,
      408,  425,    0,  447,  425,  410,  447,    0,  418,  426,

      427,  426,  427,  417,    0,  426,  427,  428,  426,  428,
      420,    0,  429,  428,  429,    0,  430,  429,  429,  424,
      425,  430,  433,  430,  431,    0,  431,  430,  434,  431,
      431,  432,  433,  432,  433,  432,    0,  432,  433,  435,
      436,  434,  436,  434,    0,    0,  436,  434,  435,  437,
      435,  437,    0,    0,  435,  437,  438,  438,  438,  439,
        0,  440,  438,  440,  439,  448,  439,  440,  448,  441,
      439,  441,  442,  449,  442,  441,  449,  443,  442,  443,
      444,  446,  444,  443,    0,  445,  444,  445,  446,  445,
      446,    0,    0,  445,  446,  448,  450,  451,  452,  450,

      451,  452,  453,  454,  455,  453,  454,  455,  456,  457,
        0,  456,  457,  449,  459,  460,  475,  459,  460,  475,
        0,  461,  450,  461,  451,  458,  477,  461,  458,  477,
        0,  458,  458,  458,  478,  456,    0,  478,  454,  475,
      458,  462,  455,  465,  463,  457,  463,  462,  463,  462,
      463,  464,  465,  462,  465,    0,  484,    0,  465,  484,
      466,  464,  466,  464,    0,    0,  466,  464,  467,    0,
      467,    0,  468,  468,  467,  468,  469,  470,  469,  468,
        0,  471,  469,  471,    0,    0,  470,  471,  470,  472,
      472,  472,  470,  473,  474,  473,  474,  484,  472,  473,

      474,  476,  479,  480,  476,  479,  480,  485,    0,  480,
      480,  480,  481,  482,  483,  481,  482,  483,  480,  472,
      485,  472,  485,  486,    0,  472,  485,  487,  476,  487,
      483,    0,  486,  487,  486,    0,    0,  481,  486,  488,
      493,  488,  479,  492,  492,  488,  492,  489,  482,  489,
      492,  489,    0,  489,  490,  490,  490,  491,    0,  494,
      493,  494,  493,  490,  494,  494,  493,    0,  491,  495,
      491,  503,  495,  496,  491,  497,  496,  498,  497,  499,
      498,  503,  499,  503,  490,  500,  490,  503,  500,  501,
      490,  502,  501,  498,  502,  495,  504,  505,  504,  505,

        0,  506,  504,  505,  507,  509,  507,  509,    0,  507,
      507,  509,  508,    0,  508,  502,  508,  510,  508,  511,
      499,  506,  511,  506,    0,  500,  515,  506,  515,  510,
      512,  510,  515,  512,  513,  510,  514,  513,  516,  514,
      517,  519,    0,  520,  519,  517,  520,  517,    0,  518,
      516,  517,  516,    0,  512,  511,  516,    0,  518,  521,
      518,    0,  521,  514,  518,  513,  522,  523,  522,  524,
      520,  524,  522,  522,  525,  524,  523,  525,  523,  527,
      526,  527,  523,  526,  519,  527,  529,  528,  530,  529,
      530,    0,    0,    0,  530,    0,  528,    0,  528,    0,

        0,  521,  528,    0,    0,    0,    0,  526,  533,    0,
      533,  534,  534,  534,  535,  535,  535,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/glslLexer.lex"
/* GLSL Flex lexr */
#line 7 "src/glslLexer.lex"
	#include <vector>
	#include <sstream>
    #include "qscilexerglsl.h"

#line 1070 "src/generated/glslLexer.cpp"

#define INITIAL 0
#define LEXSTRING 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 14 "src/glslLexer.lex"

#line 1173 "src/generated/glslLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 532 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2118 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 15 "src/glslLexer.lex"
{ return QsciLexerGLSL::StyleType::STRING; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 16 "src/glslLexer.lex"
{
                        BEGIN(INITIAL);
                        return QsciLexerGLSL::StyleType::STRING;
                    }
	YY_BREAK
case 3:
#line 21 "src/glslLexer.lex"
case 4:
#line 22 "src/glslLexer.lex"
case 5:
#line 23 "src/glslLexer.lex"
case 6:
#line 24 "src/glslLexer.lex"
case 7:
#line 25 "src/glslLexer.lex"
case 8:
#line 26 "src/glslLexer.lex"
case 9:
#line 27 "src/glslLexer.lex"
case 10:
#line 28 "src/glslLexer.lex"
case 11:
#line 29 "src/glslLexer.lex"
case 12:
#line 30 "src/glslLexer.lex"
case 13:
#line 31 "src/glslLexer.lex"
case 14:
#line 32 "src/glslLexer.lex"
case 15:
#line 33 "src/glslLexer.lex"
case 16:
#line 34 "src/glslLexer.lex"
case 17:
#line 35 "src/glslLexer.lex"
case 18:
#line 36 "src/glslLexer.lex"
case 19:
#line 37 "src/glslLexer.lex"
case 20:
#line 38 "src/glslLexer.lex"
case 21:
#line 39 "src/glslLexer.lex"
case 22:
#line 40 "src/glslLexer.lex"
case 23:
#line 41 "src/glslLexer.lex"
case 24:
#line 42 "src/glslLexer.lex"
case 25:
#line 43 "src/glslLexer.lex"
case 26:
#line 44 "src/glslLexer.lex"
case 27:
#line 45 "src/glslLexer.lex"
case 28:
#line 46 "src/glslLexer.lex"
case 29:
#line 47 "src/glslLexer.lex"
case 30:
YY_RULE_SETUP
#line 47 "src/glslLexer.lex"
{ return QsciLexerGLSL::StyleType::KEYWORD; }
	YY_BREAK
case 31:
#line 50 "src/glslLexer.lex"
case 32:
#line 51 "src/glslLexer.lex"
case 33:
#line 52 "src/glslLexer.lex"
case 34:
#line 53 "src/glslLexer.lex"
case 35:
YY_RULE_SETUP
#line 53 "src/glslLexer.lex"
{ return QsciLexerGLSL::StyleType::DATATYPE; }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 55 "src/glslLexer.lex"
{ return QsciLexerGLSL::StyleType::COMMENT; }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 56 "src/glslLexer.lex"
{ return QsciLexerGLSL::StyleType::WHITESPACE; }
	YY_BREAK
case 38:
#line 59 "src/glslLexer.lex"
case 39:
#line 60 "src/glslLexer.lex"
case 40:
#line 61 "src/glslLexer.lex"
case 41:
#line 62 "src/glslLexer.lex"
case 42:
#line 63 "src/glslLexer.lex"
case 43:
YY_RULE_SETUP
#line 63 "src/glslLexer.lex"
{ return QsciLexerGLSL::StyleType::OPERATOR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 65 "src/glslLexer.lex"
{
                                        BEGIN(LEXSTRING);
                                        return QsciLexerGLSL::StyleType::STRING;
                                    }
	YY_BREAK
case 45:
#line 71 "src/glslLexer.lex"
case 46:
#line 72 "src/glslLexer.lex"
case 47:
YY_RULE_SETUP
#line 72 "src/glslLexer.lex"
{ return QsciLexerGLSL::StyleType::NUMBER; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "src/glslLexer.lex"
{ return QsciLexerGLSL::StyleType::FUNCTION; }
	YY_BREAK
case 49:
#line 76 "src/glslLexer.lex"
case 50:
#line 77 "src/glslLexer.lex"
case 51:
#line 78 "src/glslLexer.lex"
case 52:
#line 79 "src/glslLexer.lex"
case 53:
YY_RULE_SETUP
#line 79 "src/glslLexer.lex"
{ return QsciLexerGLSL::StyleType::DEFAULT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 82 "src/glslLexer.lex"
ECHO;
	YY_BREAK
#line 1410 "src/generated/glslLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LEXSTRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 532 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 532 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 531);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 82 "src/glslLexer.lex"



void test(){
    std::cout<<"test\n";
}

