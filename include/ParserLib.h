#ifndef PARSER_H__
#define PARSER_H__
#include <unordered_map>
#include <iostream>
#include <ngl/ShaderLib.h>
#include <ngl/Shader.h>
#include <fstream>
#include <UniformData.h>

//------------------------------------------------------------------------------------------------------------------------
/// @file ParserLib.h
/// @brief the parsing library, used to manage all the uniform data.
/// @author Adam Jonathan Ting
/// @version 1.0
/// @date 25/02/16
//------------------------------------------------------------------------------------------------------------------------
class parserLib
{

public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ctor for our ParserLib
  //----------------------------------------------------------------------------------------------------------------------
  parserLib();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor for our ParserLib
  //----------------------------------------------------------------------------------------------------------------------
  ~parserLib();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief finds number of active uniforms and stores the data in blocks called uniformData.
  ///  This then stores it in a list m_uniformList
  //----------------------------------------------------------------------------------------------------------------------
  void initializeUniformData();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets default values for the active uniforms
  //----------------------------------------------------------------------------------------------------------------------
  void assignUniformValues();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief assigns all appropriate values, locations, data types, names
  //----------------------------------------------------------------------------------------------------------------------
  void assignAllData();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief takes the list of uniforms and updates them onto the shader, depending on the data type.
  /// @param[in] _shader an instance of the current shader
  //----------------------------------------------------------------------------------------------------------------------
  void sendUniformsToShader(ngl::ShaderLib *shader);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief prints the uniform location, data type and names
  /// @param[in] _printValues is whether or not you want to print out values.
  //----------------------------------------------------------------------------------------------------------------------
  void printUniforms(bool _printValues);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to translate the data type name from a number into a name. e.g. 35676 -> mat4
  /// The following section was originally written by Jon Macey:-
  /// Jon Macey. NCCA library NGL::ShaderProgram::printRegisteredUniforms [online]. [Accessed 01/10/16].
  /// Available from: <https://nccastaff.bournemouth.ac.uk/jmacey/GraphicsLib/index.html>.
  //----------------------------------------------------------------------------------------------------------------------
  void uniformDataTypes();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief exports the uniformData into a .txt file
  //----------------------------------------------------------------------------------------------------------------------
  void exportUniforms();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the number of active uniforms
  //----------------------------------------------------------------------------------------------------------------------
  uint m_num;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store a list of pre-registered Uniform data types.
  //----------------------------------------------------------------------------------------------------------------------
  std::unordered_map <std::string, uniformData*> m_registeredUniforms;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store a list of uniformData
  //----------------------------------------------------------------------------------------------------------------------
  std::vector <uniformData*> m_uniformList;


};

#endif // PARSER_H
