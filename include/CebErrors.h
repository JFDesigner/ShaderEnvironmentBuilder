#ifndef CEBERRORS_H
#define CEBERRORS_H

#include <exception>
#include <QFileDevice>

//------------------------------------------------------------------------------------------------------------------------
/// @file CebErrors.h
/// @brief contains all the code for generating and handling errors for CEB
/// @author Jonathan Flynn
/// @version 1.0
/// @date 01/03/16
//------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
// The namespace for all the of the error commands
//------------------------------------------------------------------------------------------------------------------------
namespace ceb_error
{
//------------------------------------------------------------------------------------------------------------------------
/// @class unknown_error
/// @brief an unknown error which is raised when a throw is not based from a
/// normal exception
//------------------------------------------------------------------------------------------------------------------------
class unknown_error: public std::exception
{
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return "Unknown";
  }
};
//------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_error
/// @brief base class which is raised for file errors
//------------------------------------------------------------------------------------------------------------------------
class file_error: public std::exception
{
  //------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------
public:
  //------------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor for file error
  /// @param [in] _path the location of the file
  //------------------------------------------------------------------------------------------------------------------------
  file_error(QString _path):
    m_path(_path){;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("An error occured with the file");
  }
  //------------------------------------------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------------------------------------
protected:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the file path location where the file exists
  //----------------------------------------------------------------------------------------------------------------------
  QString m_path;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief generates the error message for files
  /// @param [in] _msg the reason the error has been raised
  //----------------------------------------------------------------------------------------------------------------------
  const char *generateMsg(std::string _msg) const
  {
    std::string msg = _msg + " '" + m_path.toUtf8().constData() + "'";
    return msg.c_str();
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_read_error
/// @brief raised for file read errors
//------------------------------------------------------------------------------------------------------------------------
class file_read_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("An error occurred when reading from the file");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_write_error
/// @brief raised for file write errors
//------------------------------------------------------------------------------------------------------------------------
class file_write_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("An error occurred when writing to the file");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_fatal_error
/// @brief raised for file fatal errors
//------------------------------------------------------------------------------------------------------------------------
class file_fatal_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("A fatal error occurred with the file");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_resource_error
/// @brief raised for file resource errors
//------------------------------------------------------------------------------------------------------------------------
class file_resource_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("Out of resources when accessing the file");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_open_error
/// @brief raised for file open errors
//------------------------------------------------------------------------------------------------------------------------
class file_open_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("The file could not be opened");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_abort_error
/// @brief raised for file abort errors
//------------------------------------------------------------------------------------------------------------------------
class file_abort_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("The operation was aborted with the file");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_time_out_error
/// @brief raised for file timeout errors
//------------------------------------------------------------------------------------------------------------------------
class file_time_out_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("A timeout occurred with the file");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_unspecified_error
/// @brief raised for file unspecified errors
//------------------------------------------------------------------------------------------------------------------------
class file_unspecified_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("An unspecified error occurred with the file");
  }
};
//----------------------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------------
/// @class file_remove_error
/// @brief raised for file remove errors
//------------------------------------------------------------------------------------------------------------------------
class file_remove_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("The file could not be removed");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_rename_error
/// @brief raised for file rename errors
//------------------------------------------------------------------------------------------------------------------------
class file_rename_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("The file could not be renamed");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_position_error
/// @brief raised for file position errors
//------------------------------------------------------------------------------------------------------------------------
class file_position_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("The position in the file could not be changed");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_write_error
/// @brief raised for file resize errors
//------------------------------------------------------------------------------------------------------------------------
class file_resize_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("The file could not be resized");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_write_error
/// @brief raised for file permission errors
//------------------------------------------------------------------------------------------------------------------------
class file_permissions_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("The file could not be accessed");
  }
};
//----------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------
/// @class file_copy_error
/// @brief raised for file copy errors
//------------------------------------------------------------------------------------------------------------------------
class file_copy_error: public file_error
{
  using file_error::file_error;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns an explanatory string
  //----------------------------------------------------------------------------------------------------------------------
  virtual const char* what() const throw()
  {
    return generateMsg("The file could not be copied");
  }
};

} // namespace ceb error ends
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
// The namespace for all the of the raise error commands
//------------------------------------------------------------------------------------------------------------------------
namespace ceb_raise
{
//------------------------------------------------------------------------------------------------------------------------
/// @brief Used to throw the corresponding file error using Qt's File error enum
/// @param [in] _e the exception or error caused by the file
/// @param [in] _path the file location
//------------------------------------------------------------------------------------------------------------------------
void QtFileError(QFileDevice::FileError _e, QString _path);

} // namespace ceb raise ends
//------------------------------------------------------------------------------------------------------------------------
#endif
